/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package turnoff;

import java.io.IOException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;

/**
 *
 * @author adrian
 */

//Implements runnable for work with threads for show time
public class JFrame extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form JFrame
     */
    
    //Variables to know SO
    private static String OS = System.getProperty("os.name").toLowerCase();
    private static String OSArch = System.getProperty("os.arch").toLowerCase();
    private static String OSVersion = System.getProperty("os.version").toLowerCase();
    private static String OSUser = System.getProperty("user.name");     
    
    //Instanciate object of GregorianCalendar
    private Calendar calendarTime;
    //Instanciate diferents variables for the actual time
    private int hour, minutes, seconds;
    //Instanciate an object of thread
    private Thread h1;
    
    private boolean inverseCounterBoolean;
    
    
    //Constructor
    public JFrame() {
        initComponents();        
        //Instanciate and start Thread
        h1 = new Thread(this);
        h1.start();
        //Center JFrame 
        setLocationRelativeTo(null);
        
        //Put the System information in labels
        userNameShow.setText(OSUser);
        operatingSystemSHow.setText(OS);
        architectureShow.setText(OSArch);
        versionOSShow.setText(OSVersion);
        
        //Set enabled False diferents objects of Jframe
        selectHourJcb.setEnabled(false);
        selectMinutesJcb.setEnabled(false);
        infoLblTimeHour.setEnabled(false);
        infoLblTimeMinute.setEnabled(false);
        okExactTimeJbt.setEnabled(false);
        cancelExactTimeJbtn.setEnabled(false);
        selectMinutesJsld.setEnabled(false);
        okCountDownJbt.setEnabled(false);
        cancelCountDownJbt.setEnabled(false);
        //Put initials values on label CountDown
        infoMinutesCountDown.setText(""+90);
        inverseCounterBoolean = false;
        
        //Remove Items of ComboBox time and minutes
        selectHourJcb.removeAllItems();
        selectMinutesJcb.removeAllItems();
        //Call method to put information on Combobox Hour and minutes
        putValuesJcb();
    
    }
    //End of constructor
    
    private void putValuesJcb(){       
        //Put information on Combo Hour
        for(int y = 00 ; y < 24 ; y++){
            if(y < 10){
                selectHourJcb.addItem("0"+y);
            }else{
                selectHourJcb.addItem(""+y);
            }            
        }        
        //Put information on combo Minutes
        for(int x = 0 ; x < 60 ; x++){
            if(x < 10){
                selectMinutesJcb.addItem("0"+x);
            }else{
                selectMinutesJcb.addItem(""+x);            
            }    
        }    
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        actualTimePanel = new javax.swing.JPanel();
        timeHour = new javax.swing.JLabel();
        timeMinutes = new javax.swing.JLabel();
        timeSeconds = new javax.swing.JLabel();
        separator1 = new javax.swing.JLabel();
        separator2 = new javax.swing.JLabel();
        horarySystem = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        informationPanel = new javax.swing.JPanel();
        userNameFixedlbl = new javax.swing.JLabel();
        operatingSystemFixedlbl = new javax.swing.JLabel();
        architectureFixedlbl = new javax.swing.JLabel();
        userNameShow = new javax.swing.JLabel();
        operatingSystemSHow = new javax.swing.JLabel();
        architectureShow = new javax.swing.JLabel();
        versionOSFixed = new javax.swing.JLabel();
        versionOSShow = new javax.swing.JLabel();
        timerJpnl = new javax.swing.JPanel();
        exactTimeJpnl = new javax.swing.JPanel();
        showHourLblTimmer = new javax.swing.JLabel();
        showMinutesLbl = new javax.swing.JLabel();
        selectHourJcb = new javax.swing.JComboBox<>();
        selectMinutesJcb = new javax.swing.JComboBox<>();
        activateJcbExactTime = new javax.swing.JButton();
        infoLblTimePowerOf = new javax.swing.JLabel();
        infoLblTimeHour = new javax.swing.JLabel();
        infoLblTimeMinute = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        okExactTimeJbt = new javax.swing.JButton();
        cancelExactTimeJbtn = new javax.swing.JButton();
        countdownJpnl = new javax.swing.JPanel();
        activateSliderCountDown = new javax.swing.JButton();
        selectMinutesJsld = new javax.swing.JSlider();
        countDownlblInfo1 = new javax.swing.JLabel();
        countDownlblInfo2 = new javax.swing.JLabel();
        okCountDownJbt = new javax.swing.JButton();
        cancelCountDownJbt = new javax.swing.JButton();
        infoMinutesCountDown = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Turn of by Adri");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(187, 187, 187));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        actualTimePanel.setBackground(new java.awt.Color(227, 226, 224));
        actualTimePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actual time", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        timeHour.setBackground(new java.awt.Color(254, 254, 254));
        timeHour.setFont(new java.awt.Font("Ubuntu", 1, 30)); // NOI18N
        timeHour.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeHour.setEnabled(false);
        timeHour.setOpaque(true);

        timeMinutes.setBackground(new java.awt.Color(254, 254, 254));
        timeMinutes.setFont(new java.awt.Font("Ubuntu", 1, 30)); // NOI18N
        timeMinutes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeMinutes.setEnabled(false);
        timeMinutes.setOpaque(true);

        timeSeconds.setBackground(new java.awt.Color(254, 254, 254));
        timeSeconds.setFont(new java.awt.Font("Ubuntu", 1, 30)); // NOI18N
        timeSeconds.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeSeconds.setEnabled(false);
        timeSeconds.setOpaque(true);

        separator1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        separator1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        separator1.setText(":");

        separator2.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        separator2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        separator2.setText(":");

        horarySystem.setBackground(new java.awt.Color(254, 254, 254));
        horarySystem.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        horarySystem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        horarySystem.setEnabled(false);
        horarySystem.setOpaque(true);

        javax.swing.GroupLayout actualTimePanelLayout = new javax.swing.GroupLayout(actualTimePanel);
        actualTimePanel.setLayout(actualTimePanelLayout);
        actualTimePanelLayout.setHorizontalGroup(
            actualTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actualTimePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(timeHour, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(separator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(timeMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(separator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(timeSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(horarySystem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        actualTimePanelLayout.setVerticalGroup(
            actualTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actualTimePanelLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(actualTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(separator1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(timeSeconds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeMinutes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeHour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(separator2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(horarySystem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(176, 161, 52));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        informationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));

        userNameFixedlbl.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        userNameFixedlbl.setText("Username: ");
        userNameFixedlbl.setOpaque(true);

        operatingSystemFixedlbl.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        operatingSystemFixedlbl.setText("Operating System: ");
        operatingSystemFixedlbl.setOpaque(true);

        architectureFixedlbl.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        architectureFixedlbl.setText("Architecture:");

        userNameShow.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        operatingSystemSHow.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        architectureShow.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        versionOSFixed.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        versionOSFixed.setText("Version:");

        versionOSShow.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        javax.swing.GroupLayout informationPanelLayout = new javax.swing.GroupLayout(informationPanel);
        informationPanel.setLayout(informationPanelLayout);
        informationPanelLayout.setHorizontalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userNameFixedlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userNameShow, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(informationPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(architectureFixedlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(versionOSFixed, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(architectureShow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(versionOSShow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(informationPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(operatingSystemFixedlbl)
                        .addGap(18, 18, 18)
                        .addComponent(operatingSystemSHow, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        informationPanelLayout.setVerticalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operatingSystemSHow, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(operatingSystemFixedlbl)
                    .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(userNameFixedlbl)
                        .addComponent(userNameShow, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(architectureShow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(architectureFixedlbl))
                .addGap(18, 18, 18)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versionOSFixed)
                    .addComponent(versionOSShow, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        timerJpnl.setBorder(javax.swing.BorderFactory.createTitledBorder("Program Timmer"));

        exactTimeJpnl.setBackground(new java.awt.Color(199, 194, 189));
        exactTimeJpnl.setBorder(javax.swing.BorderFactory.createTitledBorder("Exact Time"));

        showHourLblTimmer.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        showHourLblTimmer.setText("Hour");

        showMinutesLbl.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        showMinutesLbl.setText("Minutes");

        selectHourJcb.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        selectHourJcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectHourJcb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectHourJcbItemStateChanged(evt);
            }
        });

        selectMinutesJcb.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        selectMinutesJcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectMinutesJcb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectMinutesJcbItemStateChanged(evt);
            }
        });

        activateJcbExactTime.setText("Activate this");
        activateJcbExactTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateJcbExactTimeActionPerformed(evt);
            }
        });

        infoLblTimePowerOf.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        infoLblTimePowerOf.setText("Power Off on:");

        infoLblTimeHour.setBackground(new java.awt.Color(254, 254, 254));
        infoLblTimeHour.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        infoLblTimeHour.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLblTimeHour.setOpaque(true);

        infoLblTimeMinute.setBackground(new java.awt.Color(254, 254, 254));
        infoLblTimeMinute.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        infoLblTimeMinute.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLblTimeMinute.setOpaque(true);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(":");

        okExactTimeJbt.setText("OK");
        okExactTimeJbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okExactTimeJbtActionPerformed(evt);
            }
        });

        cancelExactTimeJbtn.setText("Cancel");
        cancelExactTimeJbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelExactTimeJbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout exactTimeJpnlLayout = new javax.swing.GroupLayout(exactTimeJpnl);
        exactTimeJpnl.setLayout(exactTimeJpnlLayout);
        exactTimeJpnlLayout.setHorizontalGroup(
            exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exactTimeJpnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(exactTimeJpnlLayout.createSequentialGroup()
                        .addGroup(exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(exactTimeJpnlLayout.createSequentialGroup()
                                .addGroup(exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(showHourLblTimmer, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(showMinutesLbl))
                                .addGap(78, 78, 78)
                                .addGroup(exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(selectMinutesJcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(selectHourJcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(exactTimeJpnlLayout.createSequentialGroup()
                                .addComponent(infoLblTimePowerOf)
                                .addGap(28, 28, 28)
                                .addComponent(infoLblTimeHour, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(infoLblTimeMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 6, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exactTimeJpnlLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(activateJcbExactTime, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exactTimeJpnlLayout.createSequentialGroup()
                        .addComponent(okExactTimeJbt, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelExactTimeJbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        exactTimeJpnlLayout.setVerticalGroup(
            exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exactTimeJpnlLayout.createSequentialGroup()
                .addComponent(activateJcbExactTime)
                .addGap(29, 29, 29)
                .addGroup(exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showHourLblTimmer)
                    .addComponent(selectHourJcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showMinutesLbl)
                    .addComponent(selectMinutesJcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(infoLblTimePowerOf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(infoLblTimeHour, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(infoLblTimeMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(exactTimeJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelExactTimeJbtn)
                    .addComponent(okExactTimeJbt))
                .addContainerGap())
        );

        countdownJpnl.setBackground(new java.awt.Color(206, 200, 194));
        countdownJpnl.setBorder(javax.swing.BorderFactory.createTitledBorder("Countdown"));

        activateSliderCountDown.setText("Activate this");
        activateSliderCountDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateSliderCountDownActionPerformed(evt);
            }
        });

        selectMinutesJsld.setMaximum(180);
        selectMinutesJsld.setMinimum(5);
        selectMinutesJsld.setValue(90);
        selectMinutesJsld.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                selectMinutesJsldStateChanged(evt);
            }
        });

        countDownlblInfo1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        countDownlblInfo1.setText("Power off in:");

        countDownlblInfo2.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        countDownlblInfo2.setText("minutes.");

        okCountDownJbt.setText("OK");
        okCountDownJbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okCountDownJbtActionPerformed(evt);
            }
        });

        cancelCountDownJbt.setText("Cancel");
        cancelCountDownJbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelCountDownJbtActionPerformed(evt);
            }
        });

        infoMinutesCountDown.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        javax.swing.GroupLayout countdownJpnlLayout = new javax.swing.GroupLayout(countdownJpnl);
        countdownJpnl.setLayout(countdownJpnlLayout);
        countdownJpnlLayout.setHorizontalGroup(
            countdownJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(countdownJpnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(countdownJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, countdownJpnlLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(countDownlblInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(countdownJpnlLayout.createSequentialGroup()
                        .addGroup(countdownJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectMinutesJsld, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(countdownJpnlLayout.createSequentialGroup()
                                .addComponent(activateSliderCountDown, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(countdownJpnlLayout.createSequentialGroup()
                                .addGroup(countdownJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(okCountDownJbt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoMinutesCountDown, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(countdownJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(countdownJpnlLayout.createSequentialGroup()
                                        .addComponent(countDownlblInfo2)
                                        .addGap(0, 11, Short.MAX_VALUE))
                                    .addComponent(cancelCountDownJbt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        countdownJpnlLayout.setVerticalGroup(
            countdownJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(countdownJpnlLayout.createSequentialGroup()
                .addComponent(activateSliderCountDown)
                .addGap(43, 43, 43)
                .addComponent(countDownlblInfo1)
                .addGap(18, 18, 18)
                .addComponent(selectMinutesJsld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(countdownJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoMinutesCountDown, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countDownlblInfo2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(countdownJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelCountDownJbt)
                    .addComponent(okCountDownJbt))
                .addContainerGap())
        );

        javax.swing.GroupLayout timerJpnlLayout = new javax.swing.GroupLayout(timerJpnl);
        timerJpnl.setLayout(timerJpnlLayout);
        timerJpnlLayout.setHorizontalGroup(
            timerJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timerJpnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exactTimeJpnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(countdownJpnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        timerJpnlLayout.setVerticalGroup(
            timerJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timerJpnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(timerJpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exactTimeJpnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(countdownJpnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(informationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timerJpnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(timerJpnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actualTimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(actualTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void activateJcbExactTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateJcbExactTimeActionPerformed
        //Put dieferents objects enabled True
        selectHourJcb.setEnabled(true);
        selectMinutesJcb.setEnabled(true);
        infoLblTimeHour.setEnabled(true);
        infoLblTimeMinute.setEnabled(true);
        okExactTimeJbt.setEnabled(true);
        cancelExactTimeJbtn.setEnabled(true);
        //Put this button mode Enabled False
        //activateJcbExactTime.setEnabled(false);
        activateCountDown(false);
    }//GEN-LAST:event_activateJcbExactTimeActionPerformed

    //This method Activate/desactivate Exact Time elements
    private void activateExactTimeElements(boolean pass){
        activateJcbExactTime.setEnabled(pass);
        selectHourJcb.setEnabled(pass);
        selectMinutesJcb.setEnabled(pass);
        okExactTimeJbt.setEnabled(pass);
        cancelExactTimeJbtn.setEnabled(pass);
    }
    
    private void activateCountDown(boolean pass){
        activateSliderCountDown.setEnabled(pass);
        selectMinutesJsld.setEnabled(pass);
        okCountDownJbt.setEnabled(pass);
        cancelCountDownJbt.setEnabled(pass);
    }
    
    //Put the hour in the label when select any hour of the combobox 
    private void selectHourJcbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectHourJcbItemStateChanged
        infoLblTimeHour.setText(""+selectHourJcb.getSelectedItem());
    }//GEN-LAST:event_selectHourJcbItemStateChanged

    //Put the minutes on the label when select any minute of the comboBox
    private void selectMinutesJcbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectMinutesJcbItemStateChanged
        infoLblTimeMinute.setText(""+selectMinutesJcb.getSelectedItem());
    }//GEN-LAST:event_selectMinutesJcbItemStateChanged

    //When press cancel button on Exact Time
    private void cancelExactTimeJbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelExactTimeJbtnActionPerformed
        //Put diferents comboBox on item 0
        selectHourJcb.setSelectedIndex(0);
        selectMinutesJcb.setSelectedIndex(0);
        //Put enabled False diferent comboBox
        selectHourJcb.setEnabled(false);
        selectMinutesJcb.setEnabled(false);
        //Put enabled False dieferents label of info
        infoLblTimeHour.setEnabled(false);
        infoLblTimeMinute.setEnabled(false);
        //put enabled False diferents buttons
        okExactTimeJbt.setEnabled(false);
        cancelExactTimeJbtn.setEnabled(false);
        //Put enabled True button activate Exact Time part
        activateJcbExactTime.setEnabled(true);
        //Activate Button activate Slider
        activateSliderCountDown.setEnabled(true);
        executeCommandCancel();
    }//GEN-LAST:event_cancelExactTimeJbtnActionPerformed

    private void okExactTimeJbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okExactTimeJbtActionPerformed
        JOptionPane.showMessageDialog(null, "This computer turn of at " + infoLblTimeHour.getText() + " : " + infoLblTimeMinute.getText());
        if(OS.equals("linux")){
            //If SO is linux
            executeCommand("shutdown -h " + infoLblTimeHour.getText() + ":" + infoLblTimeMinute.getText());
        }else{
            //If not is linux, is Windows, only change the time for total the seconds
            executeCommand("shutdown -s -t " + (Integer.parseInt(infoLblTimeHour.getText())*3600) + Integer.parseInt(infoLblTimeMinute.getText())*60);
        }        
        activateJcbExactTime.setEnabled(false);
        selectHourJcb.setEnabled(false);
        selectMinutesJcb.setEnabled(false);
        infoLblTimeHour.setEnabled(false);
        infoLblTimeMinute.setEnabled(false);
        okExactTimeJbt.setEnabled(false);
    }//GEN-LAST:event_okExactTimeJbtActionPerformed

    
    
    private void activateSliderCountDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateSliderCountDownActionPerformed
        selectMinutesJsld.setEnabled(true);
        okCountDownJbt.setEnabled(true);
        cancelCountDownJbt.setEnabled(true);
        activateExactTimeElements(false);
    }//GEN-LAST:event_activateSliderCountDownActionPerformed

    private void selectMinutesJsldStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_selectMinutesJsldStateChanged
        infoMinutesCountDown.setText(""+selectMinutesJsld.getValue());
    }//GEN-LAST:event_selectMinutesJsldStateChanged

    private void cancelCountDownJbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelCountDownJbtActionPerformed
        selectMinutesJsld.setEnabled(false);
        okCountDownJbt.setEnabled(false);
        cancelCountDownJbt.setEnabled(false);
        activateSliderCountDown.setEnabled(true);
        activateJcbExactTime.setEnabled(true);
        executeCommandCancel();
    }//GEN-LAST:event_cancelCountDownJbtActionPerformed

    private void okCountDownJbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okCountDownJbtActionPerformed
        JOptionPane.showMessageDialog(null, "The system power off in " + selectMinutesJsld.getValue() + " minutes ");
        activateSliderCountDown.setEnabled(false);
        activateSliderCountDown.setEnabled(false);
        okCountDownJbt.setEnabled(false);
        selectMinutesJsld.setEnabled(false); 
        if(OS.equals("linux")){
            executeCommand("shutdown -h +" + selectMinutesJsld.getValue());
        }else{
            executeCommand("shutdown -s -t " + selectMinutesJsld.getValue()*60);
        }
    }//GEN-LAST:event_okCountDownJbtActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        executeCommandCancel();
    }//GEN-LAST:event_formWindowClosing

    //Method to execute commando,received an String with this command
    private void executeCommand(String command){
        //Flag 
        System.out.println(command);
        try {
            Runtime.getRuntime().exec(command);
        } catch (IOException ioe) {
            System.out.println (ioe);
        }
    }
    
    private void executeCommandCancel(){
        if(OS.equals("linux")){
            //If SO is linux
            executeCommand("shutdown -c");
        }else{
            //If not is linux, is Windows, only change the second parameter
            executeCommand("shutdown -a");
        }
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activateJcbExactTime;
    private javax.swing.JButton activateSliderCountDown;
    private javax.swing.JPanel actualTimePanel;
    private javax.swing.JLabel architectureFixedlbl;
    private javax.swing.JLabel architectureShow;
    private javax.swing.JButton cancelCountDownJbt;
    private javax.swing.JButton cancelExactTimeJbtn;
    private javax.swing.JLabel countDownlblInfo1;
    private javax.swing.JLabel countDownlblInfo2;
    private javax.swing.JPanel countdownJpnl;
    private javax.swing.JPanel exactTimeJpnl;
    private javax.swing.JLabel horarySystem;
    private javax.swing.JLabel infoLblTimeHour;
    private javax.swing.JLabel infoLblTimeMinute;
    private javax.swing.JLabel infoLblTimePowerOf;
    private javax.swing.JLabel infoMinutesCountDown;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton okCountDownJbt;
    private javax.swing.JButton okExactTimeJbt;
    private javax.swing.JLabel operatingSystemFixedlbl;
    private javax.swing.JLabel operatingSystemSHow;
    private javax.swing.JComboBox<String> selectHourJcb;
    private javax.swing.JComboBox<String> selectMinutesJcb;
    private javax.swing.JSlider selectMinutesJsld;
    private javax.swing.JLabel separator1;
    private javax.swing.JLabel separator2;
    private javax.swing.JLabel showHourLblTimmer;
    private javax.swing.JLabel showMinutesLbl;
    private javax.swing.JLabel timeHour;
    private javax.swing.JLabel timeMinutes;
    private javax.swing.JLabel timeSeconds;
    private javax.swing.JPanel timerJpnl;
    private javax.swing.JLabel userNameFixedlbl;
    private javax.swing.JLabel userNameShow;
    private javax.swing.JLabel versionOSFixed;
    private javax.swing.JLabel versionOSShow;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        Thread ct = Thread.currentThread();
        while(ct == h1){
            calculateTime();
            try{
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                System.out.println("Error on Thread.sleep");
            }
        }
    }
    
    //Method for claculate the actual time and put in the labels
    private void calculateTime(){        
        //Create everytime one new Calendar 
        calendarTime = new GregorianCalendar();
        
        //Get values of time of the object Calendar
        hour = calendarTime.get(Calendar.HOUR_OF_DAY);
        minutes = calendarTime.get(Calendar.MINUTE);
        seconds = calendarTime.get(Calendar.SECOND);
        
        //Put the values in the respect labels
        timeHour.setText(String.valueOf(hour));
        timeMinutes.setText(String.valueOf(minutes));
        timeSeconds.setText(String.valueOf(seconds));
        
        if(hour > 11){
            horarySystem.setText("PM");
        }else{
            horarySystem.setText("AM");
        }
    }
    
    
}
